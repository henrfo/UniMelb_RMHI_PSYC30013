# makes into factors
d$name <- as.factor(d$name)
dd$name <- as.factor(dd$name)
d$kind <- as.factor(d$kind)
# reorders so fun comes before competitive, makes figure nicer
d$level <- factor(d$level, levels=c("fun","competitive"))
dd$level <- factor(dd$level, levels=c("fun","competitive"))
# Put your code here
table(d$talent,d$level)
# Put your code here
d$talent <- factor(d$talent, levels = c("singing","dancing", "instrument", "comedy", "magic", "other"))
table(d$talent)
# Put your code here
d <- d %>% rename(species = kind)
# Put your code here
d[(d$judge == 1 | d$judge == 2) & d$audience >= 8, ]
# Put your code here
d %>%
filter((judge == 1 | judge == 2) & audience >= 8)
# Put your code here
na.omit(d[(d$judge == 1 | d$judge == 2) & d$audience >= 8, ])
# Put your code here
dshort <- d %>% select (-c(audience, judge))
head(dshort)
# Put your code here
#(b) Use tidyverse function(s) you were taught in Week 3 to transform dshort so that it looks like the tibble in the screenshot below. (Don’t worry if the order of the rows/columns is different, but there should be the same number of rows and columns with the same values). Assign the result to a new tibble called d2. Make sure that the top rows of d2 are visible in your knitted Markdown.
d2 <- dshort %>%
group_by(name, species) %>%
mutate(
competitive = if_else(level == "competitive", talent, NA_character_),
fun = if_else(level == "fun", talent, NA_character_)
) %>%
summarise(
competitive = first(na.omit(competitive)),
fun = first(na.omit(fun))
) %>%
ungroup()
print(d2)
# optional code here
# Put your code here
# (d) Use your d2 tibble to determine if anybody broke either of the two rules of the talent show that are explained in the description for level in Table 1. For each rule, you should include code that identifies individuals that broke this rule – don’t just look at the tibble manually to find them. In your answer, be sure to list everyone who broke a rule along with what rule(s) they broke. If you did not succeed in creating d2 in part (b), you can use the tibble called d3b that has already been loaded for you.
# everybody needed to participate in both the fun and the competitive levels = fun & competitive
# they could not present the same kind of talent at both levels. fun != competitive
d2 %>%
filter(
is.na(competitive)
| is.na(fun)
| (fun == competitive)
)
# Put your code here
d <- d %>%
arrange(name)
head(d)
# Put your code here
d_full <- full_join(d,dd)
head(d_full)
# This code has been given to you, you just need to run it
dc <- cbind(d,dd)
head(dc)
# Put your code here
df <- df %>%
mutate(durType = case_when(
duration >= 10 ~ "long",
duration >= 5 ~ "medium",
duration < 5  ~ "short"
))
head(df)
# Put your code here
ds <- df %>%
group_by(talent) %>%
summarise(
medAud = median(audience, na.rm =TRUE),
mnAud = mean(audience, na.rm =TRUE),
sdAud= sd(audience, na.rm =TRUE),
n = n(),
sderrAud = sd(audience, na.rm = TRUE) / sqrt(n)
) %>%
ungroup()
head(ds)
# Put your code here
d6_barplot <- ggplot(data = d6, aes(x = talent, y = medAud, fill = talent)) +
geom_col(alpha = 0.9, color = "black", width = 0.7)  +
geom_jitter(aes(color = talent), position = position_jitter(width = 0.5), size = 2, alpha = 0.8) +
geom_errorbar(aes(ymin = medAud - sdAud, ymax = medAud + sdAud), width = 0.2, position = position_dodge(0.7)) +
facet_wrap(~level) +
theme_bw() +
labs(
subtitle = "Audience rating for each kind of talent",
x = "Talent",
y = "Rating (higher = better)"
) +
scale_alpha_continuous(0,5,10) +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1")
print((d6_barplot))
# Put your code here
df_durJudge <- df %>%
ggplot(mapping = aes(x = factor(judge, exclude = NULL), y = duration, fill=durType, colour=durType)) +
geom_violin(colour="black", show.legend = FALSE) +
geom_jitter(show.legend = FALSE, alpha=0.8) +
facet_wrap(~level) +
theme_minimal() +
scale_fill_brewer(palette = "Blues", direction=-1) +
scale_colour_brewer(palette = "Blues", direction=-1) +
labs(
title = "Duration and Judge-Placement",
x = "Placement",
y = "Duration (minutes)",
)
print(df_durJudge)
# get the lowest score
lowest <- min(d$audience,na.rm=TRUE)
lowest
# get the highest score
highest <- max(d$audience,na.rm=TRUE)
highest
# Put your code here
dbinom(x=10,size=10, prob=0.7)
dbinom(x=3,size=10, prob=0.7)
# this code is given
df <- df %>%
mutate(prob = pnorm(duration,mean=6.5,sd=3))
# you may add additional code here if it's useful to answer the question
# We'll begin by loading up the libraries and data we need, as always.
knitr::opts_chunk$set(echo = TRUE)
# this deletes any variables that are in your environment
# useful so you don't get conflicts you're unaware of
rm(list=ls())
# loading the libraries
library(tidyverse)
library(here)
library(ggplot2)
library(RColorBrewer)
d <- read_csv(file=here("talentshow.csv"))
dd <- read_csv(file=here("talentshow_duration.csv"))
# these tibbles may be useful in some of the questions
d3b <- read_csv(file=here("d3b.csv"))
d6 <- read_csv(file=here("d6.csv"))
df <- read_csv(file=here("dfullMine.csv"))
# makes into factors
d$name <- as.factor(d$name)
dd$name <- as.factor(dd$name)
d$kind <- as.factor(d$kind)
# reorders so fun comes before competitive, makes figure nicer
d$level <- factor(d$level, levels=c("fun","competitive"))
dd$level <- factor(dd$level, levels=c("fun","competitive"))
# Put your code here
table(d$talent,d$level)
# Put your code here
d$talent <- factor(d$talent, levels = c("singing","dancing", "instrument", "comedy", "magic", "other"))
table(d$talent)
# Put your code here
d <- d %>% rename(species = kind)
# Put your code here
d[(d$judge == 1 | d$judge == 2) & d$audience >= 8, ]
# Put your code here
d %>%
filter((judge == 1 | judge == 2) & audience >= 8)
# Put your code here
na.omit(d[(d$judge == 1 | d$judge == 2) & d$audience >= 8, ])
# Put your code here
dshort <- d %>% select (-c(audience, judge))
head(dshort)
# Put your code here
#(b) Use tidyverse function(s) you were taught in Week 3 to transform dshort so that it looks like the tibble in the screenshot below. (Don’t worry if the order of the rows/columns is different, but there should be the same number of rows and columns with the same values). Assign the result to a new tibble called d2. Make sure that the top rows of d2 are visible in your knitted Markdown.
d2 <- dshort %>%
group_by(name, species) %>%
mutate(
competitive = if_else(level == "competitive", talent, NA_character_),
fun = if_else(level == "fun", talent, NA_character_)
) %>%
summarise(
competitive = first(na.omit(competitive)),
fun = first(na.omit(fun))
) %>%
ungroup()
print(d2)
# optional code here
# Put your code here
# (d) Use your d2 tibble to determine if anybody broke either of the two rules of the talent show that are explained in the description for level in Table 1. For each rule, you should include code that identifies individuals that broke this rule – don’t just look at the tibble manually to find them. In your answer, be sure to list everyone who broke a rule along with what rule(s) they broke. If you did not succeed in creating d2 in part (b), you can use the tibble called d3b that has already been loaded for you.
# everybody needed to participate in both the fun and the competitive levels = fun & competitive
# they could not present the same kind of talent at both levels. fun != competitive
d2 %>%
filter(
is.na(competitive)
| is.na(fun)
| (fun == competitive)
)
# Put your code here
d <- d %>%
arrange(name)
head(d)
# Put your code here
d_full <- full_join(d,dd)
head(d_full)
# This code has been given to you, you just need to run it
dc <- cbind(d,dd)
head(dc)
# Put your code here
df <- df %>%
mutate(durType = case_when(
duration >= 10 ~ "long",
duration >= 5 ~ "medium",
duration < 5  ~ "short"
))
head(df)
# Put your code here
ds <- df %>%
group_by(talent) %>%
summarise(
medAud = median(audience, na.rm =TRUE),
mnAud = mean(audience, na.rm =TRUE),
sdAud= sd(audience, na.rm =TRUE),
n = n(),
sderrAud = sd(audience, na.rm = TRUE) / sqrt(n)
) %>%
ungroup()
head(ds)
# Put your code here
d6_barplot <- ggplot(data = d6, aes(x = talent, y = medAud, fill = talent)) +
geom_col(alpha = 0.9, color = "black", width = 0.7)  +
geom_jitter(aes(color = talent), position = position_jitter(width = 0.5), size = 2, alpha = 0.8) +
geom_errorbar(aes(ymin = medAud - sdAud, ymax = medAud + sdAud), width = 0.2, position = position_dodge(0.7)) +
facet_wrap(~level) +
theme_bw() +
labs(
subtitle = "Audience rating for each kind of talent",
x = "Talent",
y = "Rating (higher = better)"
) +
scale_alpha_continuous(0,5,10) +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1")
print((d6_barplot))
# Put your code here
df_durJudge <- df %>%
ggplot(mapping = aes(x = factor(judge, exclude = NULL), y = duration, fill=durType, colour=durType)) +
geom_violin(colour="black", show.legend = FALSE) +
geom_jitter(show.legend = FALSE, alpha=0.8) +
facet_wrap(~level) +
theme_minimal() +
scale_fill_brewer(palette = "Blues", direction=-1) +
scale_colour_brewer(palette = "Blues", direction=-1) +
labs(
title = "Duration and Judge-Placement",
x = "Placement",
y = "Duration (minutes)",
)
print(df_durJudge)
# get the lowest score
lowest <- min(d$audience,na.rm=TRUE)
lowest
# get the highest score
highest <- max(d$audience,na.rm=TRUE)
highest
# Put your code here
dbinom(x=10,size=10, prob=0.7)
dbinom(x=3,size=10, prob=0.7)
# this code is given
df <- df %>%
mutate(prob = pnorm(duration,mean=6.5,sd=3))
# you may add additional code here if it's useful to answer the question
# We'll begin by loading up the libraries and data we need, as always.
knitr::opts_chunk$set(echo = TRUE)
# this deletes any variables that are in your environment
# useful so you don't get conflicts you're unaware of
rm(list=ls())
# loading the libraries
library(tidyverse)
library(here)
library(ggplot2)
library(RColorBrewer)
d <- read_csv(file=here("talentshow.csv"))
dd <- read_csv(file=here("talentshow_duration.csv"))
# these tibbles may be useful in some of the questions
d3b <- read_csv(file=here("d3b.csv"))
d6 <- read_csv(file=here("d6.csv"))
df <- read_csv(file=here("dfullMine.csv"))
# makes into factors
d$name <- as.factor(d$name)
dd$name <- as.factor(dd$name)
d$kind <- as.factor(d$kind)
# reorders so fun comes before competitive, makes figure nicer
d$level <- factor(d$level, levels=c("fun","competitive"))
dd$level <- factor(dd$level, levels=c("fun","competitive"))
# Put your code here
table(d$talent,d$level)
# Put your code here
d$talent <- factor(d$talent, levels = c("singing","dancing", "instrument", "comedy", "magic", "other"))
table(d$talent)
# Put your code here
d <- d %>% rename(species = kind)
# Put your code here
d[(d$judge == 1 | d$judge == 2) & d$audience >= 8, ]
# Put your code here
d %>%
filter((judge == 1 | judge == 2) & audience >= 8)
# Put your code here
na.omit(d[(d$judge == 1 | d$judge == 2) & d$audience >= 8, ])
# Put your code here
dshort <- d %>% select (-c(audience, judge))
head(dshort)
# Put your code here
#(b) Use tidyverse function(s) you were taught in Week 3 to transform dshort so that it looks like the tibble in the screenshot below. (Don’t worry if the order of the rows/columns is different, but there should be the same number of rows and columns with the same values). Assign the result to a new tibble called d2. Make sure that the top rows of d2 are visible in your knitted Markdown.
d2 <- dshort %>%
group_by(name, species) %>%
mutate(
competitive = if_else(level == "competitive", talent, NA_character_),
fun = if_else(level == "fun", talent, NA_character_)
) %>%
summarise(
competitive = first(na.omit(competitive)),
fun = first(na.omit(fun))
) %>%
ungroup()
print(d2)
# optional code here
# Put your code here
# (d) Use your d2 tibble to determine if anybody broke either of the two rules of the talent show that are explained in the description for level in Table 1. For each rule, you should include code that identifies individuals that broke this rule – don’t just look at the tibble manually to find them. In your answer, be sure to list everyone who broke a rule along with what rule(s) they broke. If you did not succeed in creating d2 in part (b), you can use the tibble called d3b that has already been loaded for you.
# everybody needed to participate in both the fun and the competitive levels = fun & competitive
# they could not present the same kind of talent at both levels. fun != competitive
d2 %>%
filter(
is.na(competitive)
| is.na(fun)
| (fun == competitive)
)
# Put your code here
d <- d %>%
arrange(name)
head(d)
# Put your code here
d_full <- full_join(d,dd)
head(d_full)
# This code has been given to you, you just need to run it
dc <- cbind(d,dd)
head(dc)
# Put your code here
df <- df %>%
mutate(durType = case_when(
duration >= 10 ~ "long",
duration >= 5 ~ "medium",
duration < 5  ~ "short"
))
head(df)
# Put your code here
ds <- df %>%
group_by(talent) %>%
summarise(
medAud = median(audience, na.rm =TRUE),
mnAud = mean(audience, na.rm =TRUE),
sdAud= sd(audience, na.rm =TRUE),
n = n(),
sderrAud = sd(audience, na.rm = TRUE) / sqrt(n)
) %>%
ungroup()
head(ds)
# Put your code here
d6_barplot <- ggplot(data = d6, aes(x = talent, y = medAud, fill = talent)) +
geom_col(alpha = 0.9, color = "black", width = 0.7)  +
geom_jitter(aes(color = talent), position = position_jitter(width = 0.5), size = 2, alpha = 0.8) +
geom_errorbar(aes(ymin = medAud - sdAud, ymax = medAud + sdAud), width = 0.2, position = position_dodge(0.7)) +
facet_wrap(~level) +
theme_bw() +
labs(
subtitle = "Audience rating for each kind of talent",
x = "Talent",
y = "Rating (higher = better)"
) +
scale_alpha_continuous(0,5,10) +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1")
print((d6_barplot))
# Put your code here
df_durJudge <- df %>%
ggplot(mapping = aes(x = factor(judge, exclude = NULL), y = duration, fill=durType, colour=durType)) +
geom_violin(colour="black", show.legend = FALSE) +
geom_jitter(show.legend = FALSE, alpha=0.8) +
facet_wrap(~level) +
theme_minimal() +
scale_fill_brewer(palette = "Blues", direction=-1) +
scale_colour_brewer(palette = "Blues", direction=-1) +
labs(
title = "Duration and Judge-Placement",
x = "Placement",
y = "Duration (minutes)",
)
print(df_durJudge)
# get the lowest score
lowest <- min(d$audience,na.rm=TRUE)
lowest
# get the highest score
highest <- max(d$audience,na.rm=TRUE)
highest
# Put your code here
dbinom(x=10,size=10, prob=0.7)
dbinom(x=3,size=10, prob=0.7)
# this code is given
df <- df %>%
mutate(prob = pnorm(duration,mean=6.5,sd=3))
# you may add additional code here if it's useful to answer the question
# We'll begin by loading up the libraries and data we need, as always.
knitr::opts_chunk$set(echo = TRUE)
# this deletes any variables that are in your environment
# useful so you don't get conflicts you're unaware of
rm(list=ls())
# loading the libraries
library(tidyverse)
library(here)
library(ggplot2)
library(RColorBrewer)
d <- read_csv(file=here("talentshow.csv"))
dd <- read_csv(file=here("talentshow_duration.csv"))
# these tibbles may be useful in some of the questions
d3b <- read_csv(file=here("d3b.csv"))
d6 <- read_csv(file=here("d6.csv"))
df <- read_csv(file=here("dfullMine.csv"))
# makes into factors
d$name <- as.factor(d$name)
dd$name <- as.factor(dd$name)
d$kind <- as.factor(d$kind)
# reorders so fun comes before competitive, makes figure nicer
d$level <- factor(d$level, levels=c("fun","competitive"))
dd$level <- factor(dd$level, levels=c("fun","competitive"))
# Put your code here
table(d$talent,d$level)
# Put your code here
d$talent <- factor(d$talent, levels = c("singing","dancing", "instrument", "comedy", "magic", "other"))
table(d$talent)
# Put your code here
d <- d %>% rename(species = kind)
# Put your code here
d[(d$judge == 1 | d$judge == 2) & d$audience >= 8, ]
# Put your code here
d %>%
filter((judge == 1 | judge == 2) & audience >= 8)
# Put your code here
na.omit(d[(d$judge == 1 | d$judge == 2) & d$audience >= 8, ])
# Put your code here
dshort <- d %>% select (-c(audience, judge))
head(dshort)
# Put your code here
#(b) Use tidyverse function(s) you were taught in Week 3 to transform dshort so that it looks like the tibble in the screenshot below. (Don’t worry if the order of the rows/columns is different, but there should be the same number of rows and columns with the same values). Assign the result to a new tibble called d2. Make sure that the top rows of d2 are visible in your knitted Markdown.
d2 <- dshort %>%
group_by(name, species) %>%
mutate(
competitive = if_else(level == "competitive", talent, NA_character_),
fun = if_else(level == "fun", talent, NA_character_)
) %>%
summarise(
competitive = first(na.omit(competitive)),
fun = first(na.omit(fun))
) %>%
ungroup()
print(d2)
# optional code here
# Put your code here
# (d) Use your d2 tibble to determine if anybody broke either of the two rules of the talent show that are explained in the description for level in Table 1. For each rule, you should include code that identifies individuals that broke this rule – don’t just look at the tibble manually to find them. In your answer, be sure to list everyone who broke a rule along with what rule(s) they broke. If you did not succeed in creating d2 in part (b), you can use the tibble called d3b that has already been loaded for you.
# everybody needed to participate in both the fun and the competitive levels = fun & competitive
# they could not present the same kind of talent at both levels. fun != competitive
d2 %>%
filter(
is.na(competitive)
| is.na(fun)
| (fun == competitive)
)
# Put your code here
d <- d %>%
arrange(name)
head(d)
# Put your code here
d_full <- full_join(d,dd)
head(d_full)
# This code has been given to you, you just need to run it
dc <- cbind(d,dd)
head(dc)
# Put your code here
df <- df %>%
mutate(durType = case_when(
duration >= 10 ~ "long",
duration >= 5 ~ "medium",
duration < 5  ~ "short"
))
head(df)
# Put your code here
ds <- df %>%
group_by(talent) %>%
summarise(
medAud = median(audience, na.rm =TRUE),
mnAud = mean(audience, na.rm =TRUE),
sdAud= sd(audience, na.rm =TRUE),
n = n(),
sderrAud = sd(audience, na.rm = TRUE) / sqrt(n)
) %>%
ungroup()
head(ds)
# Put your code here
d6_barplot <- ggplot(data = d6, aes(x = talent, y = medAud, fill = talent)) +
geom_col(alpha = 0.9, color = "black", width = 0.7)  +
geom_jitter(aes(color = talent), position = position_jitter(width = 0.5), size = 2, alpha = 0.8) +
geom_errorbar(aes(ymin = medAud - sdAud, ymax = medAud + sdAud), width = 0.2, position = position_dodge(0.7)) +
facet_wrap(~level) +
theme_bw() +
labs(
subtitle = "Audience rating for each kind of talent",
x = "Talent",
y = "Rating (higher = better)"
) +
scale_alpha_continuous(0,5,10) +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1")
print((d6_barplot))
